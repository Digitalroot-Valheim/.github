name: Build, Test and Release

on:
  workflow_call:
    inputs:
      sln-file-name:
        description: 'Name of SLN file w/o .sln, assumes sln file is in the src-path dir. e.g. ./src-path/sln-file-name.sln'
        required: true
        type: string

      proj-file-name:
        description: 'Name of proj file w/o .csproj, assumes proj dir is named the same as the proj-file-name. e.g. ./src-path/proj-file-name/proj-file-name.csproj'
        required: true
        type: string

      src-path:
        description: 'Path to source w/o trailing /'
        required: false
        default: 'src'
        type: string

      unit-test-path:
        description: 'Path to UnitTest project dir w/o trailing /, assumes path starts after src-path. e.g. ./src-path/unit-test-path'
        required: false
        default: 'UnitTests'
        type: string

      skip-unit-tests:
        description: 'Skip Unit Tests'
        required: false
        default: false
        type: boolean

      force-assembly-version:
        description: 'Force the nuget package to use the assembly version'
        required: false
        default: false
        type: boolean

      create-github-release:
        description: 'Create a github release.'
        required: false
        default: true
        type: boolean

      aws-region:
        description: 'AWS Region'
        required: false
        default: 'us-west-2'
        type: string

      is-nuget-package:
        description: 'Is the output a NuGet Package'
        required: false
        default: true
        type: boolean

      skip-build:
        description: 'Should building be skipped?'
        required: false
        default: false
        type: boolean

      nuget-gh-upload:
        description: 'Upload the nuget package to gh nuget repo.'
        required: false
        default: false
        type: boolean

      nuget-s3-upload:
        description: 'Upload the nuget package to S3 nuget repo.'
        required: false
        default: false
        type: boolean

      nuget-org-upload:
        description: 'Upload the nuget package to nuget.org repo.'
        required: false
        default: false
        type: boolean

      nexus-enable-upload:
        description: 'Upload Mod to Nexus'
        required: false
        default: false
        type: boolean

      nexus-mod-id:
        description: 'Nexus Id for the mod.'
        required: false
        default: -1
        type: number
        
      ts-enable-upload:
        description: 'Upload Mod to Thunderstore'
        required: false
        default: false
        type: boolean

      ts-categories:
        description: 'A list, separated by spaces of categories to give to the mod when published. See https://thunderstore.io/api/experimental/community/valheim/category/'
        required: false
        default: "Server-side Client-side"
        type: string
        
      ts-dependencies:
        description: 'A list, separated by spaces, of mods this mod depends on. Must be in namespace-modname@1.2.3 format.'
        required: false
        default: "denikson-BepInExPack_Valheim@5.4.2105"
        type: string
        
      ts-name:
        description: 'Name of the package.'
        required: false
        default: false
        type: string
        
      ts-description:
        description: 'Description of the package that will appear on Thunderstore.'
        required: false
        default: false
        type: string      
        
      ts-community:
        description: 'Thunderstore community to publish to.'
        required: false
        default: "valheim"
        type: string
        
      ts-namespace:
        description: 'Name of the team to publish under.'
        required: false
        default: "Digitalroot"
        type: string           

    secrets:
      aws-access-key-id:
        description: 'AWS Access Key Id'
        required: false

      aws-secret-access-key:
        description: 'AWS Secret Access Key'
        required: false

      nexus-api-key:
        description: 'Nexus Api key'
        required: false

      nexus-cookie-nxid-header:
        description: 'Nexus nexusid cookie'
        required: false

      nexus-cookie-sid-header:
        description: 'Nexus sid_develop cookie'
        required: false

      nuget-org-key:
        description: 'nuget.org Api key'
        required: false

      ts-api-key:
        description: 'Thunderstore Api key'
        required: false
        
      webhook_url:
        description: 'Discord Webhook URL.'
        required: true

env:
  NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages

jobs:
  #[PREBUILD]
  prebuild:
    name: Pre-Build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      sln-file-name: ${{ steps.vars.outputs.sln-file-name }}
      proj-file-name: ${{ steps.vars.outputs.proj-file-name }}
      src-path: ${{ steps.vars.outputs.src-path }}
      unit-test-path: ${{ steps.vars.outputs.unit-test-path }}
      skip-unit-tests: ${{ steps.vars.outputs.skip-unit-tests }}
      force-assembly-version: ${{ steps.vars.outputs.force-assembly-version }}
      create-github-release: ${{ steps.vars.create-github-release }}
      aws-region: ${{ steps.vars.outputs.aws-region }}
      nuget-gh-upload: ${{ steps.vars.outputs.nuget-gh-upload }}
      nuget-s3-upload: ${{ steps.vars.outputs.nuget-s3-upload }}
      nuget-org-upload: ${{ steps.vars.outputs.nuget-org-upload }}
      nexus-enable-upload: ${{ steps.vars.outputs.nexus-enable-upload }}
      nexus-mod-id: ${{ steps.vars.outputs.nexus-mod-id }}
      date: ${{ steps.vars.outputs.date }}
      version: ${{ steps.vars.outputs.version }}
      version-prefix: ${{ steps.vars.outputs.version-prefix }}
      version-suffix: ${{ steps.vars.outputs.version-suffix }}
      package-version: ${{ steps.vars.outputs.package-version }}
      artifactName: ${{ steps.vars.outputs.artifactName }}
      artifactVersion: ${{ steps.vars.outputs.artifactVersion }}
      file-version: ${{ steps.vars.outputs.file-version }}
      informational-version: ${{ steps.vars.outputs.informational-version }}
      previous-tag: ${{ steps.vars.outputs.previous-tag }}
      next-tag: ${{ steps.vars.outputs.next-tag }}
      is-nuget-package: ${{ steps.vars.outputs.is-nuget-package }}
      skip-build : ${{ steps.vars.outputs.skip-build }}
      ts-enable-upload: ${{ steps.vars.outputs.ts-enable-upload }}
      ts-namespace: ${{ steps.vars.outputs.ts-namespace }}
      ts-name: ${{ steps.vars.outputs.ts-name }}
      ts-description: ${{ steps.vars.outputs.ts-description }}
      ts-categories: ${{ steps.vars.outputs.ts-categories }}
      ts-community: ${{ steps.vars.outputs.ts-community }}
      ts-dependencies: ${{ steps.vars.outputs.ts-dependencies }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get Assembly Version
        uses: kzrnm/get-net-sdk-project-versions-action@v2
        id: get-version
        with:
          proj-path: ${{ github.workspace }}/${{ inputs.src-path }}/${{ inputs.proj-file-name }}/${{ inputs.proj-file-name }}.csproj

      - name: Get Previous tag
        uses: KrogerWalt/action-get-latest-tag@v4
        id: previoustag
        with:
          initial_version: ${{steps.get-version.outputs.assembly-version}}

      - name: Get next minor version
        uses: WyriHaximus/github-action-next-semvers@v1.2.1
        id: semvers
        with:
          version: ${{ steps.previoustag.outputs.tag }}

      - name: Setup Variables
        id: vars
        env:
          LC_ALL: en_US.utf8
        run: |
          echo "date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT
          echo "date-short=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
          echo "date-year=$(date +'%Y')" >> $GITHUB_OUTPUT
          echo "date-month=$(date +'%m')" >> $GITHUB_OUTPUT
          echo "date-day=$(date +'%d')" >> $GITHUB_OUTPUT              
          echo "sln-file-name=${{ inputs.sln-file-name }}" >> $GITHUB_OUTPUT
          echo "proj-file-name=${{ inputs.proj-file-name }}" >> $GITHUB_OUTPUT
          echo "src-path=${{ inputs.src-path }}" >> $GITHUB_OUTPUT
          echo "unit-test-path=${{ inputs.unit-test-path }}" >> $GITHUB_OUTPUT
          echo "skip-unit-tests=${{ inputs.skip-unit-tests }}" >> $GITHUB_OUTPUT
          echo "force-assembly-version=${{ inputs.force-assembly-version }}" >> $GITHUB_OUTPUT
          echo "create-github-release=${{ inputs.create-github-release }}" >> $GITHUB_OUTPUT
          echo "aws-region=${{ inputs.aws-region }}" >> $GITHUB_OUTPUT
          echo "nuget-gh-upload=${{ inputs.nuget-gh-upload }}" >> $GITHUB_OUTPUT
          echo "nuget-s3-upload=${{ inputs.nuget-s3-upload }}" >> $GITHUB_OUTPUT
          echo "nuget-org-upload=${{ inputs.nuget-org-upload }}" >> $GITHUB_OUTPUT
          echo "is-nuget-package=${{ inputs.is-nuget-package }}" >> $GITHUB_OUTPUT
          echo "skip-build=${{ inputs.skip-build }}" >> $GITHUB_OUTPUT
          echo "nexus-enable-upload=${{ inputs.nexus-enable-upload }}" >> $GITHUB_OUTPUT
          echo "nexus-mod-id=${{ inputs.nexus-mod-id }}" >> $GITHUB_OUTPUT
          echo "version=${{ steps.get-version.outputs.version }}" >> $GITHUB_OUTPUT
          echo "version-prefix=${{ steps.get-version.outputs.version-prefix }}" >> $GITHUB_OUTPUT
          echo "version-suffix=${{ steps.get-version.outputs.version-suffix }}" >> $GITHUB_OUTPUT
          echo "package-version=${{ steps.get-version.outputs.package-version }}" >> $GITHUB_OUTPUT
          echo "assembly-version=${{ steps.get-version.outputs.assembly-version }}" >> $GITHUB_OUTPUT
          echo "file-version=${{ steps.get-version.outputs.file-version }}" >> $GITHUB_OUTPUT
          echo "informational-version=${{ steps.get-version.outputs.informational-version }}" >> $GITHUB_OUTPUT
          echo "previous-tag=${{ steps.previoustag.outputs.tag }}" >> $GITHUB_OUTPUT
          echo "next-tag=${{ steps.semvers.outputs.patch }}" >> $GITHUB_OUTPUT
          echo "ts-enable-upload=${{ inputs.ts-enable-upload }}" >> $GITHUB_OUTPUT
          echo "ts-namespace=${{ inputs.ts-namespace }}" >> $GITHUB_OUTPUT
          echo "ts-name=${{ inputs.ts-name }}" >> $GITHUB_OUTPUT
          echo "ts-description=${{ inputs.ts-description }}" >> $GITHUB_OUTPUT
          echo "ts-categories=${{ inputs.ts-categories }}" >> $GITHUB_OUTPUT
          echo "ts-community=${{ inputs.ts-community }}" >> $GITHUB_OUTPUT
          echo "ts-dependencies=${{ inputs.ts-dependencies }}" >> $GITHUB_OUTPUT 
        shell: bash

      - name: Log Inputs
        run: |
          echo "::notice title=sln-file-name::${{ inputs.sln-file-name }}"
          echo "::notice title=proj-file-name::${{ inputs.proj-file-name }}"
          echo "::notice title=src-path::${{ inputs.src-path }}"
          echo "::notice title=unit-test-path::${{ inputs.unit-test-path }}"
          echo "::notice title=skip-unit-tests::${{ inputs.skip-unit-tests }}"
          echo "::notice title=force-assembly-version::${{ inputs.force-assembly-version }}"
          echo "::notice title=create-github-release::${{ inputs.create-github-release }}"
          echo "::notice title=aws-region::${{ inputs.aws-region }}"
        shell: bash          

      - name: Log Inputs cont
        run: |
          echo "::notice title=is-nuget-package::${{ inputs.is-nuget-package }}"
          echo "::notice title=skip-build::${{ inputs.skip-build }}"
          echo "::notice title=nuget-gh-upload::${{ inputs.nuget-gh-upload }}"
          echo "::notice title=nuget-s3-upload::${{ inputs.nuget-s3-upload }}"
          echo "::notice title=nuget-org-upload::${{ inputs.nuget-org-upload }}"
          echo "::notice title=nexus-enable-upload::${{ inputs.nexus-enable-upload }}"
          echo "::notice title=nexus-mod-id::${{ inputs.nexus-mod-id }}"
          echo "::notice title=ts-enable-upload::${{ inputs.ts-enable-upload }}"
          echo "::notice title=ts-namespace::${{ inputs.ts-namespace }}"
          echo "::notice title=ts-name::${{ inputs.ts-name }}"
          echo "::notice title=ts-description::${{ inputs.ts-description }}"
          echo "::notice title=ts-categories::${{ inputs.ts-categories }}"
          echo "::notice title=ts-community::${{ inputs.ts-community }}"
          echo "::notice title=ts-dependencies::${{ inputs.ts-dependencies }}"
        shell: bash

      - name: Log Variables
        run: |
          echo "::notice title=date::${{ steps.vars.outputs.date }}"
          echo "::notice title=date-short::${{ steps.vars.outputs.date-short }}"
          echo "::notice title=date-year::${{ steps.vars.outputs.date-year }}"
          echo "::notice title=date-month::${{ steps.vars.outputs.date-month }}"
          echo "::notice title=date-day::${{ steps.vars.outputs.date-day }}"          
          #echo "::notice title=version::${{ steps.vars.outputs.version }}"
          #echo "::notice title=version-prefix::${{ steps.vars.outputs.version-prefix }}"
          #echo "::notice title=version-suffix::${{ steps.vars.outputs.version-suffix }}"
          #echo "::notice title=package-version::${{ steps.vars.outputs.package-version }}"
          echo "::notice title=assembly-version::${{ steps.vars.outputs.assembly-version }}"
          #echo "::notice title=file-version::${{ steps.vars.outputs.file-version }}"
          #echo "::notice title=informational-version::${{ steps.vars.outputs.informational-version }}"
          echo "::notice title=previous-tag::${{ steps.vars.outputs.previous-tag }}"
          echo "::notice title=next-tag::${{ steps.vars.outputs.next-tag }}"
        shell: bash

      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJSON(steps) }}
        run: echo "$STEPS_CONTEXT"
        
      - name: Dump github context
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: echo "$GITHUB_CONTEXT"        

  #[BUILD]
  build:
    name: Build
    needs: [prebuild]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    timeout-minutes: 10

    steps:
      - name: Setup .NET 6 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            6.0.x
            2.1.x

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Package Cache
        uses: actions/cache@v4
        id: cache
        with:
          path: ${{ github.workspace }}/.nuget/packages
          key: ${{ runner.os }}-${{ steps.vars.outputs.date-year }}-${{ steps.vars.outputs.date-month }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ steps.vars.outputs.date-year }}-${{ steps.vars.outputs.date-month }}-nuget-            

      - name: Restore
        if: steps.cache.outputs.cache-hit != 'true'
        run: dotnet restore $GITHUB_WORKSPACE/${{ needs.prebuild.outputs.src-path }}/${{ needs.prebuild.outputs.sln-file-name }}.sln --nologo -v d

      - name: Install replace-in-file tool
        if: ${{ !inputs.force-assembly-version && !inputs.is-nuget-package }}
        run: dotnet tool install -g replace-in-file

      - name: Build (w/ Version Bump)
        if: ${{ !inputs.force-assembly-version && !inputs.is-nuget-package && !inputs.skip-build }}
        run: |
          replace-in-file "$GITHUB_WORKSPACE/${{ needs.prebuild.outputs.src-path }}/${{ needs.prebuild.outputs.proj-file-name }}/MetaData.cs" -set "0.0.1" "${{ needs.prebuild.outputs.next-tag }}"
          replace-in-file "$GITHUB_WORKSPACE/${{ needs.prebuild.outputs.src-path }}/${{ needs.prebuild.outputs.proj-file-name }}/${{ needs.prebuild.outputs.proj-file-name }}.csproj" -set "0.0.1" "${{ needs.prebuild.outputs.next-tag }}"          
          dotnet build $GITHUB_WORKSPACE/${{ needs.prebuild.outputs.src-path }}/${{ needs.prebuild.outputs.sln-file-name }}.sln -c Release --nologo -v n
        shell: bash

      - name: Build nuget (w/ Version Bump)
        if: ${{ !inputs.force-assembly-version && inputs.is-nuget-package && !inputs.skip-build }}
        run: dotnet build $GITHUB_WORKSPACE/${{ needs.prebuild.outputs.src-path }}/${{ needs.prebuild.outputs.sln-file-name }}.sln -c Release --nologo -v n

      - name: Build (w/o Version Bump)
        if: ${{ inputs.force-assembly-version && !inputs.skip-build }}
        run: dotnet build $GITHUB_WORKSPACE/${{ needs.prebuild.outputs.src-path }}/${{ needs.prebuild.outputs.sln-file-name }}.sln -c Release --nologo -v n

      - name: Test
        if: ${{ !inputs.skip-unit-tests }}
        run: dotnet test $GITHUB_WORKSPACE/${{ needs.prebuild.outputs.src-path }}/${{ needs.prebuild.outputs.sln-file-name }}.sln -c Release --no-build -l "trx;LogFileName=test-results.trx" --nologo -v n

      - name: Save Test Report
        uses: actions/upload-artifact@v4
        if: ${{ !inputs.skip-unit-tests }}
        with:
          path: ${{ github.workspace }}/${{ needs.prebuild.outputs.src-path }}/UnitTests/TestResults/test-results.trx
          name: test-results
          retention-days: 1

      - name: Pack Release (w/ Version Bump)
        if: ${{ github.ref == 'refs/heads/main' && !inputs.force-assembly-version && inputs.is-nuget-package }}
        run: dotnet pack $GITHUB_WORKSPACE/${{ needs.prebuild.outputs.src-path }}/${{ needs.prebuild.outputs.proj-file-name }}/${{ needs.prebuild.outputs.proj-file-name }}.csproj -c Release --no-restore --no-build --nologo /p:Version=${{ needs.prebuild.outputs.next-tag }} -v n

      - name: Pack Release (w/o Version Bump)
        if: ${{ github.ref == 'refs/heads/main' && inputs.force-assembly-version && inputs.is-nuget-package }}
        run: dotnet pack $GITHUB_WORKSPACE/${{ needs.prebuild.outputs.src-path }}/${{ needs.prebuild.outputs.proj-file-name }}/${{ needs.prebuild.outputs.proj-file-name }}.csproj -c Release --no-restore --no-build --nologo -v n

      - name: Pack PreRelease (w/ Version Bump)
        if: ${{ github.ref == 'refs/heads/develop' && !inputs.force-assembly-version && inputs.is-nuget-package }}
        run: dotnet pack $GITHUB_WORKSPACE/${{ needs.prebuild.outputs.src-path }}/${{ needs.prebuild.outputs.proj-file-name }}/${{ needs.prebuild.outputs.proj-file-name }}.csproj -c Release --no-restore --no-build --nologo /p:Version=${{ needs.prebuild.outputs.next-tag }}-prerelease-${{ needs.prebuild.outputs.date }}-$GITHUB_RUN_NUMBER -v n

      - name: Save nuget Package
        if: inputs.is-nuget-package
        uses: actions/upload-artifact@v4
        with:
          path: ${{ github.workspace }}/${{ needs.prebuild.outputs.src-path }}/${{ needs.prebuild.outputs.proj-file-name }}/bin/Release/*.nupkg
          name: nuget-package
          retention-days: 1

      - name: Save Zip Package
        if: ${{ !inputs.is-nuget-package }}
        uses: actions/upload-artifact@v4
        with:
          path: ${{ github.workspace }}/${{ needs.prebuild.outputs.src-path }}/${{ needs.prebuild.outputs.proj-file-name }}/bin/Release/*.zip
          name: zip-package
          retention-days: 1

      - name: Download Sleet Config
        if: ${{ inputs.nuget-s3-upload }}
        run: wget https://raw.githubusercontent.com/Digitalroot-Valheim/.github/main/.config/sleet.json

      - name: Save Sleet Config
        if: ${{ inputs.nuget-s3-upload }}
        uses: actions/upload-artifact@v4
        with:
          path: ${{ github.workspace }}/sleet.json
          name: sleet-config
          retention-days: 1

      - name: Cache packages to S3 nuget repository
        if: ${{ inputs.nuget-s3-upload }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.aws-access-key-id }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.aws-secret-access-key }}
          AWS_DEFAULT_REGION: ${{ needs.prebuild.outputs.aws-region }}
        run: |
          dotnet tool install -g sleet
          sleet push $NUGET_PACKAGES --skip-existing --config $GITHUB_WORKSPACE/sleet.json
        shell: bash          

  #[POSTBUILD]
  postbuild:
    name: Post-Build
    needs: [prebuild, build]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        if: ${{ !inputs.skip-unit-tests }}
        uses: actions/checkout@v4

      - name: Download nuget package
        if: ${{ !inputs.skip-unit-tests }}
        uses: actions/download-artifact@v4
        with:
          name: test-results

      - name: List files in the repository
        if: ${{ !inputs.skip-unit-tests }}
        run: |
          ls -la ${{ github.workspace }}

      - name: Test Reporter
        if: ${{ !inputs.skip-unit-tests }}
        uses: dorny/test-reporter@v1
        with:
          name: NUnit Tests                              # Name of the check run which will be created
          path: ${{ github.workspace }}/test-results.trx # Path to test results
          reporter: dotnet-trx                           # Format of test results
          path-replace-backslashes: 'true'
          list-suites: 'all'
          list-tests: 'all'
          max-annotations: '50'
          fail-on-error: false

  #[PUSH GH]
  push-gh-nuget:
    name: Push nuget package to github repo
    needs: [prebuild, build]
    if: ${{ inputs.is-nuget-package && inputs.nuget-gh-upload }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      packages: write
    env:
      NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true
    steps:
      - name: Download nuget package
        uses: actions/download-artifact@v4
        with:
          name: nuget-package

      - name: Setup .NET 6 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '6.0.x'
          source-url: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json

      - name: Push to GH nuget repository
        run: dotnet nuget push $GITHUB_WORKSPACE/*.nupkg --skip-duplicate -k ${{ secrets.GITHUB_TOKEN }}

      - name: Success
        uses: rjstone/discord-webhook-notify@v1.0.4
        if: ${{ inputs.force-assembly-version && github.ref == 'refs/heads/main' && success() }}
        with:
            severity: info
            details: Upload to github Release ${{ needs.prebuild.outputs.version }}
            webhookUrl: ${{ secrets.webhook_url }}

      - name: Success
        uses: rjstone/discord-webhook-notify@v1.0.4
        if: ${{ !inputs.force-assembly-version && github.ref == 'refs/heads/main' && success() }}
        with:
            severity: info
            details: Upload to github Release ${{ needs.prebuild.outputs.next-tag }}
            webhookUrl: ${{ secrets.webhook_url }}
            
      - name: Failure
        uses: rjstone/discord-webhook-notify@v1.0.4
        if: failure()
        with:
            severity: error
            details: Upload to github Failed!
            webhookUrl: ${{ secrets.webhook_url }}
            
      - name: Cancelled
        uses: rjstone/discord-webhook-notify@v1.0.4
        if: cancelled()
        with:
            severity: warn
            details: Upload to github Cancelled!
            webhookUrl: ${{ secrets.webhook_url }}          

  #[PUSH S3]
  push-s3-nuget:
    name: Push nuget package to S3 repo
    needs: [prebuild, build]
    if: ${{ inputs.is-nuget-package && inputs.nuget-s3-upload }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true
    steps:
      - name: Setup .NET 6 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '6.0.x'

      - name: Download nuget package
        uses: actions/download-artifact@v4

      - name: Push to S3 nuget repository
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.aws-access-key-id }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.aws-secret-access-key }}
          AWS_DEFAULT_REGION: ${{ needs.prebuild.outputs.aws-region }}
        run: |
          dotnet tool install -g sleet
          sleet push $GITHUB_WORKSPACE/nuget-package --skip-existing --config $GITHUB_WORKSPACE/sleet-config/sleet.json
          sleet retention prune --config $GITHUB_WORKSPACE/sleet-config/sleet.json
        shell: bash

      - name: Success
        uses: rjstone/discord-webhook-notify@v1.0.4
        if: ${{ inputs.force-assembly-version && github.ref == 'refs/heads/main' && success() }}
        with:
            severity: info
            details: Upload to s3 Release ${{ needs.prebuild.outputs.version }}
            webhookUrl: ${{ secrets.webhook_url }}

      - name: Success
        uses: rjstone/discord-webhook-notify@v1.0.4
        if: ${{ !inputs.force-assembly-version && github.ref == 'refs/heads/main' && success() }}
        with:
            severity: info
            details: Upload to s3g Release ${{ needs.prebuild.outputs.next-tag }}
            webhookUrl: ${{ secrets.webhook_url }}
            
      - name: Failure
        uses: rjstone/discord-webhook-notify@v1.0.4
        if: failure()
        with:
            severity: error
            details: Upload to s3 Failed!
            webhookUrl: ${{ secrets.webhook_url }}
            
      - name: Cancelled
        uses: rjstone/discord-webhook-notify@v1.0.4
        if: cancelled()
        with:
            severity: warn
            details: Upload to s3 Cancelled!
            webhookUrl: ${{ secrets.webhook_url }}          

  #[PUSH NUGET.ORG]
  push-nuget-org:
    name: Push nuget package to nuget.org
    needs: [prebuild, build]
    if: ${{ inputs.is-nuget-package && inputs.nuget-org-upload }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      NUGET_AUTH_TOKEN: ${{ secrets.nuget-org-key }}
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true
    steps:
      - name: Download nuget package
        uses: actions/download-artifact@v4
        with:
          name: nuget-package

      - name: Setup .NET 6 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '6.0.x'
          source-url: https://api.nuget.org/v3/index.json

      - name: Push to nuget.org repository
        run: dotnet nuget push $GITHUB_WORKSPACE/*.nupkg -s https://api.nuget.org/v3/index.json --skip-duplicate -k ${{ secrets.nuget-org-key }}

      - name: Success
        uses: rjstone/discord-webhook-notify@v1.0.4
        if: ${{ inputs.force-assembly-version && github.ref == 'refs/heads/main' && success() }}
        with:
            severity: info
            details: Upload to nuget.org Release ${{ needs.prebuild.outputs.version }}
            webhookUrl: ${{ secrets.webhook_url }}

      - name: Success
        uses: rjstone/discord-webhook-notify@v1.0.4
        if: ${{ !inputs.force-assembly-version && github.ref == 'refs/heads/main' && success() }}
        with:
            severity: info
            details: Upload to nuget.org Release ${{ needs.prebuild.outputs.next-tag }}
            webhookUrl: ${{ secrets.webhook_url }}
            
      - name: Failure
        uses: rjstone/discord-webhook-notify@v1.0.4
        if: failure()
        with:
            severity: error
            details: Upload to nuget.org Failed!
            webhookUrl: ${{ secrets.webhook_url }}
            
      - name: Cancelled
        uses: rjstone/discord-webhook-notify@v1.0.4
        if: cancelled()
        with:
            severity: warn
            details: Upload to nuget.org Cancelled!
            webhookUrl: ${{ secrets.webhook_url }}         

  # Nexus Upload
  nexusupload:
    name: Upload to Nexus
    needs: [prebuild, build]
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: ${{ github.ref == 'refs/heads/main' && inputs.nexus-enable-upload && !inputs.is-nuget-package }}

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        id: download
        with:
          name: zip-package

      - name: Setup .NET 6 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '6.0.x'

      - name: Restore tools
        run: dotnet tool install -g Digitalroot.ModUploader

      - name: Upload
        env:
          NEXUSMOD_API_KEY: ${{ secrets.nexus-api-key }}
          NEXUSMOD_COOKIE_NEXUSID: ${{ secrets.nexus-cookie-nxid-header }}
          NEXUSMOD_COOKIE_SID_DEVELOP: ${{ secrets.nexus-cookie-sid-header }}
        run: |
          drmu nx check
          drmu nx upload ${{ inputs.nexus-mod-id }} ${{ steps.download.outputs.download-path }}/${{ needs.prebuild.outputs.proj-file-name }}.v${{ needs.prebuild.outputs.next-tag }}.zip -v ${{ needs.prebuild.outputs.next-tag }} -d "DigitalrootModUploader (CI/CD)" -f ${{ needs.prebuild.outputs.proj-file-name }} -dmv
        shell: bash

      - name: Success
        uses: rjstone/discord-webhook-notify@v1.0.4
        if: success()
        with:
            severity: info
            details: Upload to Nexus Release ${{ needs.prebuild.outputs.next-tag }}
            webhookUrl: ${{ secrets.webhook_url }}
            
      - name: Failure
        uses: rjstone/discord-webhook-notify@v1.0.4
        if: failure()
        with:
            severity: error
            details: Upload to Nexus Failed!
            webhookUrl: ${{ secrets.webhook_url }}
            
      - name: Cancelled
        uses: rjstone/discord-webhook-notify@v1.0.4
        if: cancelled()
        with:
            severity: warn
            details: Upload to Nexus Cancelled!
            webhookUrl: ${{ secrets.webhook_url }} 
        
  # Thunderstore Upload
  tsupload:
    name: Upload to Thunderstore
    needs: [prebuild, build]
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: ${{ github.ref == 'refs/heads/main' && inputs.ts-enable-upload && !inputs.is-nuget-package }}

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        id: download
        with:
          name: zip-package
          
      - name: Log Variables
        run: |
          echo "::notice title=ts-download-path::${{ steps.download.outputs.download-path }}"
          echo "::notice title=ts-proj-file-namen::${{ needs.prebuild.outputs.proj-file-namen }}"
          echo "::notice title=ts-next-tag:${{ needs.prebuild.outputs.next-tag }}"
          echo "::notice title=version-suffix::${{ steps.vars.outputs.version-suffix }}"
          echo "::notice title=ts-file::${{ steps.download.outputs.download-path }}/${{ needs.prebuild.outputs.proj-file-name }}.v${{ needs.prebuild.outputs.next-tag }}.ts.zip"
        shell: bash

      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJSON(steps) }}
        run: echo "$STEPS_CONTEXT"

      - name: Dump needs context
        env:
          NEEDS_CONTEXT: ${{ toJSON(needs) }}
        run: echo "$NEEDS_CONTEXT"        
        
      - name: List Files
        run: |
          pwd
          ls -laR
        shell: bash

      - uses: GreenTF/upload-thunderstore-package@v4.3
      #- uses: Digitalroot/upload-thunderstore-package@dr-main
        with:
          namespace: ${{ inputs.ts-namespace }} # the thunderstore 'team' to publish under
          description: ${{ inputs.ts-description }}
          token: ${{ secrets.ts-api-key }}
          name: ${{ inputs.ts-name }} # the name of the package
          version: ${{ needs.prebuild.outputs.next-tag }} # Use the tag as the package version
          community: ${{ inputs.ts-community }} 
          categories: ${{ inputs.ts-categories }} ashlands-update
          deps: ${{ inputs.ts-dependencies }} denikson-BepInExPack_Valheim-5.4.2202
          path: ${{ steps.download.outputs.download-path }}
          file: ./${{ needs.prebuild.outputs.proj-file-name }}.v${{ needs.prebuild.outputs.next-tag }}.ts.zip
          repo: valheim.thunderstore.io

      - name: Success
        uses: rjstone/discord-webhook-notify@v1.0.4
        if: success()
        with:
            severity: info
            details: Upload to Thunderstore Release ${{ needs.prebuild.outputs.next-tag }}
            webhookUrl: ${{ secrets.webhook_url }}
            
      - name: Failure
        uses: rjstone/discord-webhook-notify@v1.0.4
        if: failure()
        with:
            severity: error
            details: Upload to Thunderstore Failed!
            webhookUrl: ${{ secrets.webhook_url }}
            
      - name: Cancelled
        uses: rjstone/discord-webhook-notify@v1.0.4
        if: cancelled()
        with:
            severity: warn
            details: Upload to Thunderstore Cancelled!
            webhookUrl: ${{ secrets.webhook_url }}  

  #[PUBLISH]
  publish:
    name: Create github release
    needs: [prebuild, build, postbuild]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: ${{ github.ref == 'refs/heads/main' && inputs.create-github-release }}

    steps:
      - name: Dump needs context
        env:
            NEEDS_CONTEXT: ${{ toJSON(needs) }}
        run: echo "$NEEDS_CONTEXT"

      - name: Check for failure.
        if: ${{ needs.prebuild.result == 'failure' || needs.build.result == 'failure' || needs.postbuild.result == 'failure' }}
        run: exit 1

      - name: Download nuget package
        if: ${{ inputs.is-nuget-package && github.ref == 'refs/heads/main' && inputs.create-github-release }}
        uses: actions/download-artifact@v4
        with:
          name: nuget-package

      - name: Download zip package
        if: ${{ !inputs.is-nuget-package && github.ref == 'refs/heads/main' && inputs.create-github-release }}
        uses: actions/download-artifact@v4
        with:
          name: zip-package

      - name: Build Release Notes
        if: ${{ github.ref == 'refs/heads/main' && inputs.create-github-release }}
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: false

      - name: Create a GitHub release (w/ Version Bump)
        if: ${{ !inputs.force-assembly-version && github.ref == 'refs/heads/main' && inputs.create-github-release }}
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ needs.prebuild.outputs.next-tag }}
          name: Release ${{ needs.prebuild.outputs.next-tag }}
          body: ${{ steps.tag_version.outputs.changelog }}
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}
          commit: main
          artifacts: "${{ github.workspace }}/*.nupkg,${{ github.workspace }}/*.zip"
          omitBodyDuringUpdate: true
          omitNameDuringUpdate: true

      - name: Success
        uses: rjstone/discord-webhook-notify@v1.0.4
        if: ${{ !inputs.force-assembly-version && github.ref == 'refs/heads/main' && inputs.create-github-release && success() }}
        with:
            severity: info
            details: Github Release ${{ needs.prebuild.outputs.next-tag }}
            webhookUrl: ${{ secrets.webhook_url }}

      - name: Print Release Info
        if: ${{ !inputs.force-assembly-version && github.ref == 'refs/heads/main' && inputs.create-github-release }}
        run: echo "::notice title=Release::${{ needs.build.outputs.tag-version }}"

      - name: Create a GitHub release (w/o Version Bump)
        if: ${{ inputs.force-assembly-version && github.ref == 'refs/heads/main' && inputs.create-github-release }}
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ needs.prebuild.outputs.version }}
          name: Release ${{ needs.prebuild.outputs.version }}
          body: ${{ steps.tag_version.outputs.changelog }}
          allowUpdates: false
          token: ${{ secrets.GITHUB_TOKEN }}
          commit: main
          artifacts: "${{ github.workspace }}/*.nupkg,${{ github.workspace }}/*.zip"
          omitBodyDuringUpdate: true
          omitNameDuringUpdate: true

      - name: Success
        uses: rjstone/discord-webhook-notify@v1.0.4
        if: ${{ inputs.force-assembly-version && github.ref == 'refs/heads/main' && inputs.create-github-release && success() }}
        with:
            severity: info
            details: Github Release ${{ needs.prebuild.outputs.version }}
            webhookUrl: ${{ secrets.webhook_url }}
            
      - name: Failure
        uses: rjstone/discord-webhook-notify@v1.0.4
        if: ${{ github.ref == 'refs/heads/main' && inputs.create-github-release && failure() }}
        with:
            severity: error
            details: Release Failed!
            webhookUrl: ${{ secrets.webhook_url }}
            
      - name: Cancelled
        uses: rjstone/discord-webhook-notify@v1.0.4
        if: ${{ github.ref == 'refs/heads/main' && inputs.create-github-release && cancelled() }}
        with:
            severity: warn
            details: Release Cancelled!
            webhookUrl: ${{ secrets.webhook_url }}          
