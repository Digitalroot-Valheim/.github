name: Build, Test and Release

concurrency: ci-${{ github.ref }}

on:
  workflow_call:
    inputs:
      sln-file-name:
        description: 'Name of SLN file w/o .sln, assumes sln file is in the src-path dir. e.g. ./src-path/sln-file-name.sln'
        required: true
        type: string
        
      proj-file-name:
        description: 'Name of proj file w/o .csproj, assumes proj dir is named the same as the proj-file-name. e.g. ./src-path/proj-file-name/proj-file-name.csproj'
        required: true
        type: string
      
      src-path:
        description: 'Path to source w/o trailing /'
        required: false
        default: 'src'
        type: string
        
      unit-test-path:
        description: 'Path to UnitTest project dir w/o trailing /, assumes path starts after src-path. e.g. ./src-path/unit-test-path'
        required: false
        default: 'UnitTests'
        type: string
        
      skip-unit-tests:
        description: 'Skip Unit Tests'
        required: false
        default: false
        type: boolean

      force-assembly-version:
        description: 'Force the nuget package to use the assembly version'
        required: false
        default: false
        type: boolean

      create-github-release:
        description: 'Create a github release.'
        required: false
        default: true
        type: boolean

      aws-region:
        description: 'AWS Region'
        required: false
        default: 'us-west-2'
        type: string

      nuget-gh-upload:
        description: 'Upload the nuget package to gh nuget repo.'
        required: false
        default: false
        type: boolean

      nuget-s3-upload:
        description: 'Upload the nuget package to S3 nuget repo.'
        required: false
        default: false
        type: boolean

      nexus-enable-upload:
        description: 'Upload Mod to Nexus'
        required: false
        default: false
        type: boolean
        
      nexus-mod-id:
        description: 'Nexus Id for the mod.'
        required: false
        default: -1
        type: number

    secrets:
      aws-access-key-id:
        description: 'AWS Access Key Id'
        required: false
        
      aws-secret-access-key:
        description: 'AWS Secret Access Key'      
        required: false
        
      nexus-api-key:
        description: 'Nexus Api key'
        required: false
        
      nexus-cookies-header:
        description: 'Nexus Cookie Header'
        required: false

env:
  NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages

jobs:
  #[PREBUILD]
  prebuild:
    name: Pre-Build
    runs-on: ubuntu-latest

    outputs:
      sln-file-name: ${{ steps.env.outputs.sln-file-name }}
      proj-file-name: ${{ steps.env.outputs.proj-file-name }}
      src-path: ${{ steps.env.outputs.src-path }}
      unit-test-path: ${{ steps.env.outputs.unit-test-path }}
      skip-unit-tests: ${{ steps.env.outputs.skip-unit-tests }}
      force-assembly-version: ${{ steps.env.outputs.force-assembly-version }}
      create-github-release: ${{ steps.env.create-github-release }}
      aws-region: ${{ steps.env.outputs.aws-region }}
      nuget-gh-upload: ${{ steps.env.outputs.nuget-gh-upload }}
      nuget-s3-upload: ${{ steps.env.outputs.nuget-s3-upload }}
      nexus-enable-upload: ${{ steps.env.outputs.nexus-enable-upload }}
      nexus-mod-id: ${{ steps.env.outputs.nexus-mod-id }}
      date: ${{ steps.env.outputs.date }}
      version: ${{ steps.env.outputs.version }}
      version-prefix: ${{ steps.env.outputs.version-prefix }}
      version-suffix: ${{ steps.env.outputs.version-suffix }}
      package-version: ${{ steps.env.outputs.package-version }}
      assembly-version: ${{ steps.env.outputs.assembly-version }}
      file-version: ${{ steps.env.outputs.file-version }}
      informational-version: ${{ steps.env.outputs.informational-version }}
      previous-tag: ${{ steps.env.outputs.previous-tag }}
      next-tag: ${{ steps.env.outputs.next-tag }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get Assembly Version
        uses: kzrnm/get-net-sdk-project-versions-action@b7bb297b2d300fb378be2cd93a262a15bcf9d79b
        id: get-version
        with:
          proj-path: ${{ github.workspace }}/${{ inputs.src-path }}/${{ inputs.proj-file-name }}/${{ inputs.proj-file-name }}.csproj

      - name: Get Previous tag
        uses: actions-ecosystem/action-get-latest-tag@2ddc5e77f49bfdf508d612c5311867985fe5d59c
        id: previoustag
        with:
          semver_only: true
          initial_version: ${{steps.get-version.outputs.assembly-version}}          

      - name: Get next minor version
        uses: WyriHaximus/github-action-next-semvers@33d116a4c239252582a60a1ba8dbba63ad493ffd
        id: semvers
        with:
          version: ${{ steps.previoustag.outputs.tag }}

      - name: Setup Variables
        id: vars
        env:
          LC_ALL: en_US.utf8
        run: |
          echo "::set-output name=date::$(date +'%Y%m%d')"
          echo "::set-output name=sln-file-name::${{ inputs.sln-file-name }}"
          echo "::set-output name=proj-file-name::${{ inputs.proj-file-name }}"
          echo "::set-output name=src-path::${{ inputs.src-path }}"
          echo "::set-output name=unit-test-path::${{ inputs.unit-test-path }}"
          echo "::set-output name=skip-unit-tests::${{ inputs.skip-unit-tests }}"
          echo "::set-output name=force-assembly-version::${{ inputs.force-assembly-version }}"
          echo "::set-output name=create-github-release::${{ inputs.create-github-release }}"
          echo "::set-output name=aws-region::${{ inputs.aws-region }}"
          echo "::set-output name=nuget-gh-upload::${{ inputs.nuget-gh-upload }}"
          echo "::set-output name=nuget-s3-upload::${{ inputs.nuget-s3-upload }}"
          echo "::set-output name=nexus-enable-upload::${{ inputs.nexus-enable-upload }}"
          echo "::set-output name=nexus-mod-id::${{ inputs.nexus-mod-id }}"
          echo "::set-output name=version::${{ steps.get-version.outputs.version }}"
          echo "::set-output name=version-prefix::${{ steps.get-version.outputs.version-prefix }}"
          echo "::set-output name=version-suffix::${{ steps.get-version.outputs.version-suffix }}"
          echo "::set-output name=package-version::${{ steps.get-version.outputs.package-version }}"
          echo "::set-output name=assembly-version::${{ steps.get-version.outputs.assembly-version }}"
          echo "::set-output name=file-version::${{ steps.get-version.outputs.file-version }}"
          echo "::set-output name=informational-version::${{ steps.get-version.outputs.informational-version }}"
          echo "::set-output name=previous-tag::${{ steps.previoustag.outputs.tag }}"
          echo "::set-output name=next-tag::${{ steps.semvers.outputs.patch }}"

      - name: Log Inputs
        run: | 
          echo "::notice title=sln-file-name::${{ inputs.sln-file-name }}"
          echo "::notice title=proj-file-name::${{ inputs.proj-file-name }}"
          echo "::notice title=src-path::${{ inputs.src-path }}"
          echo "::notice title=unit-test-path::${{ inputs.unit-test-path }}"
          echo "::notice title=skip-unit-tests::${{ inputs.skip-unit-tests }}"
          echo "::notice title=force-assembly-version::${{ inputs.force-assembly-version }}"
          echo "::notice title=create-github-release::${{ inputs.create-github-release }}"
          echo "::notice title=aws-region::${{ inputs.aws-region }}"
          echo "::notice title=nuget-gh-upload::${{ inputs.nuget-gh-upload }}"
          echo "::notice title=nuget-s3-upload::${{ inputs.nuget-s3-upload }}"

      - name: Log Inputs cont
        run: | 
          echo "::notice title=nexus-enable-upload::${{ inputs.nexus-enable-upload }}"
          echo "::notice title=nexus-mod-id::${{ inputs.nexus-mod-id }}"
         
      - name: Log Variables
        run: | 
          echo "::notice title=date::${{ steps.vars.outputs.date }}"
          echo "::notice title=version::${{ steps.vars.outputs.version }}"
          echo "::notice title=version-prefix::${{ steps.vars.outputs.version-prefix }}"
          echo "::notice title=version-suffix::${{ steps.vars.outputs.version-suffix }}"
          echo "::notice title=package-version::${{ steps.vars.outputs.package-version }}"
          echo "::notice title=assembly-version::${{ steps.vars.outputs.assembly-version }}"
          echo "::notice title=file-version::${{ steps.vars.outputs.file-version }}"
          echo "::notice title=informational-version::${{ steps.vars.outputs.informational-version }}"
          echo "::notice title=previous-tag::${{ steps.vars.outputs.previous-tag }}"
          echo "::notice title=next-tag::${{ steps.vars.outputs.next-tag }}"

      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJSON(steps) }}
        run: echo "$STEPS_CONTEXT"

  #[BUILD]
  build:
    name: Build
    needs: [prebuild]
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v1.8.2
        with:
          dotnet-version: '6.0.x'

      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Package Cache
        uses: actions/cache@v2
        id: cache
        with:
          path: ${{ github.workspace }}/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore
        if: steps.cache.outputs.cache-hit != 'true'
        run: dotnet restore $GITHUB_WORKSPACE/${{ needs.prebuild.outputs.src-path }}/${{ needs.prebuild.outputs.sln-file-name }}.sln --nologo -v d
        
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJSON(steps) }}
        run: echo "$STEPS_CONTEXT"

      - name: Build (w/ Version Bump)
        if: ${{ !needs.prebuild.outputs.force-assembly-version }}
        run: dotnet build $GITHUB_WORKSPACE/${{ needs.prebuild.outputs.src-path }}/${{ needs.prebuild.outputs.sln-file-name }}.sln -c Release --nologo /p:Version=${{ needs.prebuild.outputs.next-tag }} -v n

      - name: Build (w/o Version Bump)
        if: ${{ needs.prebuild.outputs.force-assembly-version }}
        run: dotnet build $GITHUB_WORKSPACE/${{ needs.prebuild.outputs.src-path }}/${{ needs.prebuild.outputs.sln-file-name }}.sln -c Release --nologo -v n

      - name: Test
        if: ${{ !needs.prebuild.outputs.skip-unit-tests }}
        run: dotnet test $GITHUB_WORKSPACE/${{ needs.prebuild.outputs.src-path }}/${{ needs.prebuild.outputs.sln-file-name }}.sln -c Release --no-build -l "trx;LogFileName=test-results.trx" --nologo -v n

      - name: Save Test Report
        uses: actions/upload-artifact@v2
        if: ${{ !needs.prebuild.outputs.skip-unit-tests}}
        with:
          path: ${{ github.workspace }}/${{ needs.prebuild.outputs.src-path }}/UnitTests/TestResults/test-results.trx
          name: test-results
          retention-days: 1

      - name: Pack Release (w/ Version Bump)
        if: ${{ github.ref == 'refs/heads/main' && !needs.prebuild.outputs.force-assembly-version }}
        run: dotnet pack $GITHUB_WORKSPACE/${{ needs.prebuild.outputs.src-path }}/${{ needs.prebuild.outputs.proj-file-name }}/${{ needs.prebuild.outputs.proj-file-name }}.csproj -c Release --no-restore --no-build --nologo /p:Version=${{ needs.prebuild.outputs.next-tag }} -v n

      - name: Pack Release (w/o Version Bump)
        if: ${{ github.ref == 'refs/heads/main' && needs.prebuild.outputs.force-assembly-version }}
        run: dotnet pack $GITHUB_WORKSPACE/${{ needs.prebuild.outputs.src-path }}/${{ needs.prebuild.outputs.proj-file-name }}/${{ needs.prebuild.outputs.proj-file-name }}.csproj -c Release --no-restore --no-build --nologo /p:Version=${{ needs.prebuild.outputs.next-tag }} -v n

      - name: Pack PreRelease (w/ Version Bump)
        if: ${{ github.ref != 'refs/heads/main' && !needs.prebuild.outputs.force-assembly-version }}
        run: dotnet pack $GITHUB_WORKSPACE/${{ needs.prebuild.outputs.src-path }}/${{ needs.prebuild.outputs.proj-file-name }}/${{ needs.prebuild.outputs.proj-file-name }}.csproj -c Release --no-restore --no-build --nologo /p:Version=${{ needs.prebuild.outputs.next-tag }} --version-suffix ${{ needs.prebuild.outputs.date }}-$GITHUB_RUN_NUMBER -v n

      - name: Pack PreRelease (w/o Version Bump)
        if: ${{ github.ref != 'refs/heads/main' && needs.prebuild.outputs.force-assembly-version }}
        run: dotnet pack $GITHUB_WORKSPACE/${{ needs.prebuild.outputs.src-path }}/${{ needs.prebuild.outputs.proj-file-name }}/${{ needs.prebuild.outputs.proj-file-name }}.csproj -c Release --no-restore --no-build --nologo /p:Version=${{ needs.prebuild.outputs.next-tag }} --version-suffix ${{ needs.prebuild.outputs.date }}-$GITHUB_RUN_NUMBER -v n

      - name: Save Package
        uses: actions/upload-artifact@v2
        with:
          path: ${{ github.workspace }}/${{ needs.prebuild.outputs.src-path }}/${{ needs.prebuild.outputs.proj-file-name }}/bin/Release/*.nupkg
          name: nuget-package
          retention-days: 1

      - name: Download Sleet Config
        run: wget https://raw.githubusercontent.com/Digitalroot-Valheim/.github/main/.config/sleet.json

      - name: Save Sleet Config
        uses: actions/upload-artifact@v2
        with:
          path: ${{ github.workspace }}/sleet.json
          name: sleet-config
          retention-days: 1
          
      - name: Cache packages to S3 nuget repository
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.aws-access-key-id }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.aws-secret-access-key }}
          AWS_DEFAULT_REGION: ${{ needs.prebuild.outputs.aws-region }}
        run: |
          dotnet tool install -g sleet
          sleet push $NUGET_PACKAGES --skip-existing --config $GITHUB_WORKSPACE/sleet.json
         
  #[POSTBUILD]
  postbuild:
    name: Post-Build
    if: ${{ !needs.prebuild.outputs.skip-unit-tests }}
    needs: [prebuild, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download nuget package
        uses: actions/download-artifact@v2
        with:
          name: test-results

      - name: List files in the repository
        run: |
          ls -la ${{ github.workspace }}

      - name: Test Reporter
        if: ${{ !needs.prebuild.outputs.skip-unit-tests }}
        uses: dorny/test-reporter@v1.5.0
        with:
          name: NUnit Tests                              # Name of the check run which will be created
          path: ${{ github.workspace }}/test-results.trx # Path to test results
          reporter: dotnet-trx                           # Format of test results
          path-replace-backslashes: 'true'
          list-suites: 'all'
          list-tests: 'all'
          max-annotations: '50'
          fail-on-error: false

  #[PUSH GH]
  push-gh-nuget:
    name: Push nuget package to github repo
    if: ${{ needs.prebuild.outputs.nuget-gh-upload }}
    needs: [prebuild, build]
    runs-on: ubuntu-latest
    permissions:
      packages: write
    env:
      NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true
    steps:
      - name: Download nuget package
        uses: actions/download-artifact@v2
        with:
          name: nuget-package

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v1.8.2
        with:
          dotnet-version: '6.0.x'
          source-url: https://nuget.pkg.github.com/Digitalroot-Valheim/index.json

      - name: Push to GH nuget repository
        run: dotnet nuget push $GITHUB_WORKSPACE/*.nupkg --skip-duplicate

  #[PUSH S3]
  push-s3-nuget:
    name: Push nuget package to S3 repo
    if: ${{ needs.prebuild.outputs.nuget-s3-upload }}
    needs: [prebuild, build]
    runs-on: ubuntu-latest
    env:
      NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true
    steps:
      - name: Download nuget package
        uses: actions/download-artifact@v2

      - name: Push to S3 nuget repository
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.aws-access-key-id }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.aws-secret-access-key }}
          AWS_DEFAULT_REGION: ${{ needs.prebuild.outputs.aws-region }}
        run: |
          dotnet tool install -g sleet
          sleet push $GITHUB_WORKSPACE/nuget-package --skip-existing --config $GITHUB_WORKSPACE/sleet-config/sleet.json
          sleet retention prune --config $GITHUB_WORKSPACE/sleet-config/sleet.json

  #[PUBLISH]
  publish:
    name: Create github release
    needs: [prebuild, build]
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' && needs.prebuild.outputs.create-github-release }}
    steps:
      - name: Download nuget package
        uses: actions/download-artifact@v2
        with:
          name: nuget-package

      - name: Build Release Notes
        id: tag_version
        uses: mathieudutour/github-tag-action@v5.6
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: false

      - name: Create a GitHub release (w/ Version Bump)
        if: ${{ !needs.prebuild.outputs.force-assembly-version }}      
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ needs.prebuild.outputs.next-tag }}
          name: Release ${{ needs.prebuild.outputs.next-tag }}
          body: ${{ steps.tag_version.outputs.changelog }}
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}
          commit: main
          artifacts: ${{ github.workspace }}/*.nupkg
          omitBodyDuringUpdate: true
          omitNameDuringUpdate: true
          
      - name: Print Release Info
        if: ${{ !needs.prebuild.outputs.force-assembly-version }}
        run: echo "::notice title=Release::${{ needs.build.outputs.tag-version }}"          
          
      - name: Create a GitHub release (w/o Version Bump)
        if: ${{ needs.prebuild.outputs.force-assembly-version }}      
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ needs.build.outputs.assembly-version }}
          name: Release ${{ needs.build.outputs.assembly-version }}
          body: ${{ steps.tag_version.outputs.changelog }}
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}
          commit: main
          artifacts: ${{ github.workspace }}/*.nupkg
          omitBodyDuringUpdate: true
          omitNameDuringUpdate: true

      - name: Print Release Info
        if: ${{ needs.prebuild.outputs.force-assembly-version }}      
        run: echo "::notice title=Release::${{ needs.build.outputs.assembly-version }}"

  # Nexus Upload
  nexusupload:
    name: Upload to Nexus
    needs: [prebuild, build]
    runs-on: ubuntu-latest
    if: ${{ false }} 
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        id: download
        with:
          name: ${{ needs.prebuild.outputs.artifactName }}

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v1.8.2
        with:
          dotnet-version: '6.0.x'

      - name: Restore tools
        run: dotnet tool install -g nexusuploader

      - name: Upload
        env:
          UNEX_GAME: valheim
          UNEX_DEBUG: true
          UNEX_APIKEY: ${{ secrets.nexus-api-key }} # UNEX_API_KEY
          UNEX_COOKIES: ${{ secrets.nexus-cookies-header }} # UNEX_COOKIES
 
        run: |
          dotnet unex upload ${{ needs.prebuild.outputs.nexus-mod-id }} {{ needs.prebuild.outputs.artifactName }} -v ${{ needs.prebuild.outputs.artifactVersion }}
          dotnet unex changelog "Test Change" ${{ needs.prebuild.outputs.artifactVersion }} -m ${{ needs.prebuild.outputs.nexus-mod-id }} -g "valheim"
