name: NuGet Release

on:
  workflow_call:
    inputs:
      slnfilename:
        description: 'Name of SLN file w/o .sln, assumes sln file is in the srcpath dir. e.g. ./srcpath/slnfilename.sln'
        required: true
        type: string
        
      projfilename:
        description: 'Name of proj file w/o .csproj, assumes proj dir is named the same as the projfilename. e.g. ./srcpath/projfilename/projfilename.csproj'
        required: true
        type: string
      
      srcpath:
        description: 'Path to source w/o trailing /'
        required: false
        default: 'src'
        type: string
        
      unittestpath:
        description: 'Path to UnitTest project dir w/o trailing /, assumes path starts after srcpath. e.g. ./srcpath/unittestpath'
        required: false
        default: 'UnitTests'
        type: string
        
      skipunittest:
        description: 'Skip Unit Tests'
        required: false
        default: false
        type: boolean

      awsregion:
        description: 'AWS Region'
        required: false
        default: 'us-west-2'
        type: string
        
    secrets:
      awsaccesskeyid:
        description: 'AWS Access Key Id'
        required: false
        
      awssecretaccesskey:
        description: 'AWS Secret Access Key'      
        required: false

env:
  SLN_FILE_NAME: ${{ inputs.slnfilename }}.sln
  PROJ: ${{ inputs.projfilename }}
  NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  #[PREBUILD]
  prebuild:
    runs-on: ubuntu-latest
    steps:
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

  #[BUILD]
  build:
    needs: [prebuild]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      assembly-version: ${{ steps.get-version.outputs.assembly-version }}
      tag-version: ${{ steps.semvers.outputs.patch }}
    steps:
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v1.8.2
        with:
          dotnet-version: '6.0.x'

      - name: Checkout
        uses: actions/checkout@v2

      - name: Restore
        run: dotnet restore $GITHUB_WORKSPACE/${{ inputs.srcpath }}/${{ env.SLN_FILE_NAME }} --nologo

      - name: Get Previous tag
        uses: actions-ecosystem/action-get-latest-tag@2ddc5e77f49bfdf508d612c5311867985fe5d59c
        id: previoustag
        with:
          semver_only: true

      - name: Get next minor version
        uses: WyriHaximus/github-action-next-semvers@33d116a4c239252582a60a1ba8dbba63ad493ffd
        id: semvers
        with:
          version: ${{ steps.previoustag.outputs.tag }}

      - name: Print Ref
        run: | 
          echo $GITHUB_REF
          echo ${{ github.ref.name }}
          echo $GITHUB_RUN_NUMBER
          echo ${{ steps.get-latest-tag.outputs.tag }}

      - name: Build    
        run: dotnet build $GITHUB_WORKSPACE/${{ inputs.srcpath }}/${{ env.SLN_FILE_NAME }} -c Release --no-restore --nologo /p:Version=${{ steps.semvers.outputs.patch }}

      - name: Test
        if: ${{ inputs.skipunittest == false }}
        run: dotnet test $GITHUB_WORKSPACE/${{ inputs.srcpath }}/${{ env.SLN_FILE_NAME }} -c Release --no-build -l "trx;LogFileName=test-results.trx" --nologo

      - name: Save Test Report
        uses: actions/upload-artifact@v2
        if: ${{ inputs.skipunittest == false }}
        with:
          path: ${{ github.workspace }}/${{ inputs.srcpath }}/UnitTests/TestResults/test-results.trx
          name: test-results
          retention-days: 1

      - name: Pack Release
        if: ${{ github.ref == 'refs/heads/main' }}
        run: dotnet pack $GITHUB_WORKSPACE/${{ inputs.srcpath }}/${{ env.PROJ }}/${{ env.PROJ }}.csproj -c Release --no-restore --no-build --nologo /p:Version=${{ steps.semvers.outputs.patch }}

      - name: Pack PreRelease
        if: ${{ github.ref != 'refs/heads/main' }}
        run: dotnet pack $GITHUB_WORKSPACE/${{ inputs.srcpath }}/${{ env.PROJ }}/${{ env.PROJ }}.csproj -c Release --no-restore --no-build --nologo /p:Version=${{ steps.semvers.outputs.patch }} --version-suffix build-$GITHUB_RUN_NUMBER

      - name: Save Package
        uses: actions/upload-artifact@v2
        with:
          path: ${{ github.workspace }}/${{ inputs.srcpath }}/${{ env.PROJ }}/bin/Release/*.nupkg
          name: nuget-package
          retention-days: 1

      - name: Download Sleet Config
        run: wget https://raw.githubusercontent.com/Digitalroot-Valheim/.github/main/sleet.json

      - name: Save Sleet Config
        uses: actions/upload-artifact@v2
        with:
          path: ${{ github.workspace }}/sleet.json
          name: sleet-config
          retention-days: 1

      - name: get-net-sdk-project-versions-action
        uses: kzrnm/get-net-sdk-project-versions-action@b7bb297b2d300fb378be2cd93a262a15bcf9d79b
        id: get-version
        with:
          proj-path: ${{ github.workspace }}/${{ inputs.srcpath }}/${{ env.PROJ }}/${{ env.PROJ }}.csproj
      - run : |
          echo "version ${{steps.get-version.outputs.version}}"
          echo "version-prefix ${{steps.get-version.outputs.version-prefix}}" 
          echo "version-suffix ${{steps.get-version.outputs.version-suffix}}" 
          echo "package-version ${{steps.get-version.outputs.package-version}}" 
          echo "assembly-version ${{steps.get-version.outputs.assembly-version}}" 
          echo "file-version ${{steps.get-version.outputs.file-version}}" 
          echo "informational-version ${{steps.get-version.outputs.informational-version}}" 

  #[POSTBUILD]
  postbuild:
    if: always()
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download nuget package
        uses: actions/download-artifact@v2
        with:
          name: test-results

      - name: List files in the repository
        run: |
          ls -la ${{ github.workspace }}

      - name: Test Reporter
        if: ${{ inputs.skipunittest == false }}
        uses: dorny/test-reporter@v1.5.0
        with:
          name: NUnit Tests                              # Name of the check run which will be created
          path: ${{ github.workspace }}/test-results.trx # Path to test results
          reporter: dotnet-trx                           # Format of test results
          path-replace-backslashes: 'true'
          list-suites: 'all'
          list-tests: 'all'
          max-annotations: '50'
          fail-on-error: false

  #[PUSH GH]
  push-gh-nuget:
    needs: [build]
    runs-on: ubuntu-latest
    permissions:
      packages: write
    env:
      NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true
    steps:
      - name: Download nuget package
        uses: actions/download-artifact@v2
        with:
          name: nuget-package

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v1.8.2
        with:
          dotnet-version: '6.0.x'
          source-url: https://nuget.pkg.github.com/Digitalroot-Valheim/index.json

      - name: Push to GH nuget repository
        run: dotnet nuget push $GITHUB_WORKSPACE/*.nupkg --skip-duplicate

  #[PUSH S3]
  push-s3-nuget:
    needs: [build]
    runs-on: ubuntu-latest
    env:
      NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true
    steps:
      - name: Download nuget package
        uses: actions/download-artifact@v2

      - name: Push to S3 nuget repository
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.awsaccesskeyid }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.awssecretaccesskey }}
          AWS_DEFAULT_REGION: ${{ input.awsregion }}
        run: |
          dotnet tool install -g sleet
          sleet push $GITHUB_WORKSPACE/nuget-package --skip-existing --config $GITHUB_WORKSPACE/sleet-config/sleet.json
          sleet retention prune --config $GITHUB_WORKSPACE/sleet-config/sleet.json

  #[PUBLISH]
  publish:
    needs: [build]
    runs-on: ubuntu-latest
    #if: ${{ false }} # disable for now
#    permissions:
#      contents: write
    steps:
      - name: Download nuget package
        uses: actions/download-artifact@v2
        with:
          name: nuget-package

      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v5.6
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: false

      - name: Create a GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ needs.build.outputs.tag-version }}
          name: Release ${{ needs.build.outputs.tag-version }}
          body: ${{ steps.tag_version.outputs.changelog }}
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}
          commit: main
          artifacts: ${{ github.workspace }}/*.nupkg
          omitBodyDuringUpdate: true
          omitNameDuringUpdate: true
